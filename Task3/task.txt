<p><br />
1) color/

public enum ColorMode {RED,GREEN,BLUE}


import java.awt.*;
public interface IColorGenerator { 
Color getColor();
 Color getColor(int r, int g, int b);
 Color getColor(ColorMode mode);
}


2) event/
public interface Move { void move(); }




import com.epam.jmp.figure.Figure;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;


public class MoveImpl implements Move {


private final JFrame frame;
 private final Figure figure;
 private final Graphics graphics;


private int x = 0;
 private int y = 0;
 private int step = 1;
 private int delay = 1;


public MoveImpl(JFrame frame, Figure figure) {
 this.frame = frame;
 this.graphics = frame.getGraphics();
 this.figure = figure;
 }


public MoveImpl(JFrame frame, Figure figure, int x, int y, int step, int delay) {
 this(frame, figure);
 this.x = x;
 this.y = y;
 this.step = step;
 this.delay = delay;
 }


@Override
 public void move() {
 new Timer(delay, new MoveAction()).start();
 }


class MoveAction extends AbstractAction {
 @Override
 public void actionPerformed(ActionEvent e) {
 graphics.clearRect(0, 0, frame.getWidth(), frame.getHeight());
 graphics.setColor(figure.getColor());
 figure.fill(x, y, graphics);
 y += step;
 if (y > frame.getHeight() - figure.getHeight()) {
 step = -step;
 } else if (y < figure.getHeight() / 2) {
 step = -step;
 }
 }
 }
}


3) figure/


import com.epam.jmp.figure.model.Ball;
import com.epam.jmp.figure.model.Rectangle;


public interface IFigureFactory {


Ball getBall(int radius);


Rectangle getRectangle(int x, int y);
}



import java.awt.*;


public interface Figure {


Color getColor();


void fill(int x, int y, Graphics graphics);


int getHeight();


int getWidth();
}




import com.epam.jmp.color.ColorGenerator;


import java.awt.*;


public abstract class AbstractFigure implements Figure {
 protected final Color color;
 protected final int width;
 protected final int height;
//.....
}

4)figure/model


import com.epam.jmp.figure.AbstractFigure;


import java.awt.*;


// use for fill graphics.fillOval
public class Ball extends AbstractFigure {
}


import com.epam.jmp.figure.AbstractFigure;


import java.awt.*;
// use for fill graphics.fillRect
public class Rectangle extends AbstractFigure {
}

5) //utils


import javax.swing.*;



public class FrameHelper {


private FrameHelper() {
 }


private static FrameHelper instance;


public JFrame createFrame(String title, int width, int height) {
 JFrame frame = new JFrame();
 frame.setSize(width, height);
 frame.setTitle(title);
 frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
 frame.setVisible(true);
 return frame;
 }


public static FrameHelper getInstance() {
 if (instance == null) {
 instance = new FrameHelper();
 }
 return instance;
 }
}

6) main


import com.epam.jmp.event.Move;
import com.epam.jmp.event.MoveImpl;
import com.epam.jmp.figure.Figure;
import com.epam.jmp.figure.FigureFactory;
import com.epam.jmp.utils.FrameHelper;


import javax.swing.*;


public class Main {


public static void main(String[] args) {
// Figure figure = FigureFactory.getFigure(50, 40);
// Figure figure = FigureFactory.getFigure(50);


Figure figure = FigureFactory.getInstance().getBall(50);
// Figure figure = FigureFactory.getInstance().getRectangle(50,70);
 JFrame frame = FrameHelper.getInstance().createFrame("Frame", 460, 300);


Move move = new MoveImpl(frame, figure, 200, 50, 2, 20);
 move.move();
 }
}




</p>

Please rework this code use the following patterns: 
color/ColorGenerator.java you can use Singleton 
figure/FigureFactory.java you need to use Factory method and Abstract factory
figure/AbstractFigure.java 
figure/model impl Ball and Rectangle.
figure/utils/FrameHelper.java rework this code use Builder.
figure/model apply JSON Decorator for model need to add additional logic convert to JSON and put into log 
(add method toJSON or override toString)